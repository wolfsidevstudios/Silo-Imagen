import React from 'react';

// Define SVG components outside the main component to prevent re-creation on re-renders
const LoadingSpinner: React.FC = () => (
    <div className="flex flex-col items-center justify-center gap-4 text-gray-400">
        <svg className="animate-spin h-10 w-10 text-purple-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <p className="text-lg">Generating your masterpiece...</p>
    </div>
);

const ErrorDisplay: React.FC<{ message: string }> = ({ message }) => (
    <div className="text-center p-4 bg-red-900/20 border border-red-500/30 rounded-lg max-w-2xl">
        <h3 className="text-xl font-semibold text-red-400 mb-2">Error</h3>
        <p className="text-red-300">{message}</p>
    </div>
);

const DownloadIcon: React.FC = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
        <polyline points="7 10 12 15 17 10"/>
        <line x1="12" y1="15" x2="12" y2="3"/>
    </svg>
);


interface ImageDisplayProps {
    isLoading: boolean;
    error: string | null;
    generatedImage: string | null;
}

export const ImageDisplay: React.FC<ImageDisplayProps> = ({ isLoading, error, generatedImage }) => {
    
    const handleDownload = (imageUrl: string) => {
        const link = document.createElement('a');
        link.href = imageUrl;
        // Provide a unique filename for each download
        link.download = `ai-generated-image-${Date.now()}.jpeg`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    if (isLoading) {
        return <LoadingSpinner />;
    }

    if (error) {
        return <ErrorDisplay message={error} />;
    }

    if (generatedImage) {
        return (
            <div className="relative w-full max-w-5xl aspect-[16/9] bg-black/50 rounded-xl shadow-2xl shadow-purple-500/10 overflow-hidden group">
                <img
                    src={generatedImage}
                    alt="Generated by AI"
                    className="w-full h-full object-contain transition-transform duration-300 group-hover:scale-105"
                />
                <button
                    onClick={() => handleDownload(generatedImage)}
                    aria-label="Download image"
                    className="absolute top-4 right-4 bg-black/50 text-white p-2.5 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-300 hover:bg-black/75 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:opacity-100"
                >
                    <DownloadIcon />
                </button>
            </div>
        );
    }

    return (
        <div className="text-center">
            <h1 className="text-3xl text-gray-500">Type in the prompt box to start</h1>
            <p className="text-lg text-gray-600 mt-2">Or upload an image to edit it</p>
        </div>
    );
};
